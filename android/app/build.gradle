project.ext.react = [enableHermes: true]

import com.android.build.OutputFile

apply plugin: "com.android.application"
apply from: "../../node_modules/react-native/react.gradle"

// Options
def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId APPID
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1050201
        versionName "1.5.2-indev.1"
        resValue "string", "app_name", "${APPNAME}"
        manifestPlaceholders = [ applicationName: APPNAME ]
        multiDexEnabled true // MultiDex is needed to handle the tons of React Native modules, see https://developer.android.com/studio/build/multidex
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            // signingConfig signingConfigs.debug
            // minifyEnabled enableProguardInReleaseBuilds
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

dependencies {
    // Libs Folder Content Addition
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Hermes Debugger Management
    if (project.ext.react.get("enableHermes", false)) {
        def hermesPath = "../../node_modules/hermes-engine/android/"
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
    // Google services
    def playServicesVersion='17+'
    implementation ("com.google.android.gms:play-services-base:${playServicesVersion}")
    // React Native
    def reactNativeVersion='0.64.2'
    implementation ("com.facebook.react:react-native:${reactNativeVersion}")
    // Flipper
    def flipperVersion='0.87.0'
    debugImplementation("com.facebook.flipper:flipper:${flipperVersion}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${flipperVersion}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${flipperVersion}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation ("com.facebook.flipper:flipper-leakcanary-plugin:${flipperVersion}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'
    releaseImplementation ("com.facebook.flipper:flipper-noop:${flipperVersion}")
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // non autolinked packages
    implementation project(':react-native-matomo')
    // Jackson to put headers to a fullscreen video
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.1"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.1"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// React Native Firebase - @see https://rnfirebase.io/#configure-firebase-with-android-credentials
apply plugin: 'com.google.gms.google-services'
