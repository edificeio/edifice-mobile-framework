diff --git a/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js b/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js
index 9fb5637..5f9960f 100644
--- a/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js
+++ b/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js
@@ -8,22 +8,21 @@
  * @flow strict-local
  */
 
-import type {ViewStyleProp} from '../../StyleSheet/StyleSheet';
+import type { ViewStyleProp } from '../../StyleSheet/StyleSheet';
 import type {
   ViewLayout,
-  ViewLayoutEvent,
-  ViewProps,
+  ViewLayoutEvent
 } from '../View/ViewPropTypes';
-import type {KeyboardEvent, KeyboardMetrics} from './Keyboard';
+import type { KeyboardEvent, KeyboardMetrics } from './Keyboard';
 
+import * as React from 'react';
 import LayoutAnimation from '../../LayoutAnimation/LayoutAnimation';
 import StyleSheet from '../../StyleSheet/StyleSheet';
 import Platform from '../../Utilities/Platform';
-import {type EventSubscription} from '../../vendor/emitter/EventEmitter';
+import { type EventSubscription } from '../../vendor/emitter/EventEmitter';
 import AccessibilityInfo from '../AccessibilityInfo/AccessibilityInfo';
 import View from '../View/View';
 import Keyboard from './Keyboard';
-import * as React from 'react';
 
 type Props = $ReadOnly<{|
   ...ViewProps,
@@ -51,9 +50,7 @@ type Props = $ReadOnly<{|
   keyboardVerticalOffset?: number,
 |}>;
 
-type State = {|
-  bottom: number,
-|};
+type State = {};
 
 /**
  * View that moves out of the way when the keyboard appears by automatically
@@ -65,11 +62,13 @@ class KeyboardAvoidingView extends React.Component<Props, State> {
   _subscriptions: Array<EventSubscription> = [];
   viewRef: {current: React.ElementRef<typeof View> | null, ...};
   _initialFrameHeight: number = 0;
+  bottom: {current: nubmer};
 
   constructor(props: Props) {
     super(props);
-    this.state = {bottom: 0};
+    this.state = {};
     this.viewRef = React.createRef();
+    this.bottom = React.createRef(0);
   }
 
   async _relativeKeyboardHeight(
@@ -95,7 +94,7 @@ class KeyboardAvoidingView extends React.Component<Props, State> {
 
     if (this.props.behavior === 'height') {
       return Math.max(
-        this.state.bottom + frame.y + frame.height - keyboardY,
+        this.bottom.current + frame.y + frame.height - keyboardY,
         0,
       );
     }
@@ -130,14 +129,17 @@ class KeyboardAvoidingView extends React.Component<Props, State> {
 
   _updateBottomIfNecessary = async () => {
     if (this._keyboardEvent == null) {
-      this.setState({bottom: 0});
+      if (this.bottom.current !== 0) {
+        this.bottom.current = 0;
+        this.forceUpdate();
+      }
       return;
     }
 
     const {duration, easing, endCoordinates} = this._keyboardEvent;
     const height = await this._relativeKeyboardHeight(endCoordinates);
 
-    if (this.state.bottom === height) {
+    if (this.bottom.current === height) {
       return;
     }
 
@@ -151,7 +153,8 @@ class KeyboardAvoidingView extends React.Component<Props, State> {
         },
       });
     }
-    this.setState({bottom: height});
+    this.bottom.current = height;
+    this.forceUpdate();
   };
 
   componentDidMount(): void {
@@ -185,13 +188,13 @@ class KeyboardAvoidingView extends React.Component<Props, State> {
       onLayout,
       ...props
     } = this.props;
-    const bottomHeight = enabled === true ? this.state.bottom : 0;
+    const bottomHeight = enabled === true ? this.bottom.current : 0;
     switch (behavior) {
       case 'height':
         let heightStyle;
-        if (this._frame != null && this.state.bottom > 0) {
+        if (this._frame != null && this.bottom.current > 0) {
           // Note that we only apply a height change when there is keyboard present,
-          // i.e. this.state.bottom is greater than 0. If we remove that condition,
+          // i.e. this.bottom.current is greater than 0. If we remove that condition,
           // this.frame.height will never go back to its original value.
           // When height changes, we need to disable flex.
           heightStyle = {
diff --git a/node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotificationManager.mm b/node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotificationManager.mm
index 0d586d8..e98d95d 100644
--- a/node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotificationManager.mm
+++ b/node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotificationManager.mm
@@ -268,10 +268,6 @@ RCT_EXPORT_METHOD(onFinishRemoteNotification : (NSString *)notificationId fetchR
 {
   UIBackgroundFetchResult result = [RCTConvert UIBackgroundFetchResult:fetchResult];
   RCTRemoteNotificationCallback completionHandler = self.remoteNotificationCallbacks[notificationId];
-  if (!completionHandler) {
-    RCTLogError(@"There is no completion handler with notification id: %@", notificationId);
-    return;
-  }
   completionHandler(result);
   [self.remoteNotificationCallbacks removeObjectForKey:notificationId];
 }
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ComponentDescriptors.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/EventEmitters.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/Props.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/RCTComponentViewHelpers.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/ShadowNodes.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h b/node_modules/react-native/ReactCommon/react/renderer/components/rncore/States.h
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..361f5fb
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
diff --git a/node_modules/react-native/scripts/cocoapods/helpers.rb b/node_modules/react-native/scripts/cocoapods/helpers.rb
index 6d2a58d..13bbd27 100644
--- a/node_modules/react-native/scripts/cocoapods/helpers.rb
+++ b/node_modules/react-native/scripts/cocoapods/helpers.rb
@@ -38,7 +38,7 @@ end
 module Helpers
     class Constants
         def self.min_ios_version_supported
-            return '12.4'
+            return '13.0'
         end
     end
 end
diff --git a/node_modules/react-native/sdks/hermes/hermes-engine.podspec b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
new file mode 100644
index 0000000..87d0710
--- /dev/null
+++ b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
@@ -0,0 +1,114 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+require "json"
+require_relative "./hermes-utils.rb"
+
+react_native_path = File.join(__dir__, "..", "..")
+
+# Whether Hermes is built for Release or Debug is determined by the PRODUCTION envvar.
+build_type = ENV['PRODUCTION'] == "1" ? :release : :debug
+
+# package.json
+package = JSON.parse(File.read(File.join(react_native_path, "package.json")))
+version = package['version']
+
+# sdks/.hermesversion
+hermestag_file = File.join(react_native_path, "sdks", ".hermesversion")
+build_from_source = ENV['BUILD_FROM_SOURCE'] === 'true'
+
+git = "https://github.com/facebook/hermes.git"
+
+abort_if_invalid_tarball_provided!
+
+source = compute_hermes_source(build_from_source, hermestag_file, git, version, build_type, react_native_path)
+
+Pod::Spec.new do |spec|
+  spec.name        = "hermes-engine"
+  spec.version     = version
+  spec.summary     = "Hermes is a small and lightweight JavaScript engine optimized for running React Native."
+  spec.description = "Hermes is a JavaScript engine optimized for fast start-up of React Native apps. It features ahead-of-time static optimization and compact bytecode."
+  spec.homepage    = "https://hermesengine.dev"
+  spec.license     = package['license']
+  spec.author      = "Facebook"
+  spec.source      = source
+  spec.platforms   = { :osx => "10.13", :ios => "12.4" }
+
+  spec.preserve_paths      = '**/*.*'
+  spec.source_files        = ''
+
+  spec.pod_target_xcconfig = {
+                    "CLANG_CXX_LANGUAGE_STANDARD" => "c++17",
+                    "CLANG_CXX_LIBRARY" => "compiler-default"
+                  }.merge!(build_type == :debug ? { "GCC_PREPROCESSOR_DEFINITIONS" => "HERMES_ENABLE_DEBUGGER=1" } : {})
+
+  spec.ios.vendored_frameworks = "destroot/Library/Frameworks/ios/hermes.framework"
+  spec.osx.vendored_frameworks = "destroot/Library/Frameworks/macosx/hermes.framework"
+
+  if source[:http] then
+
+    spec.subspec 'Pre-built' do |ss|
+      ss.preserve_paths = ["destroot/bin/*"].concat(build_type == :debug ? ["**/*.{h,c,cpp}"] : [])
+      ss.source_files = "destroot/include/**/*.h"
+      ss.exclude_files = ["destroot/include/jsi/jsi/JSIDynamic.{h,cpp}", "destroot/include/jsi/jsi/jsilib-*.{h,cpp}"]
+      ss.header_mappings_dir = "destroot/include"
+      ss.ios.vendored_frameworks = "destroot/Library/Frameworks/universal/hermes.xcframework"
+      ss.osx.vendored_frameworks = "destroot/Library/Frameworks/macosx/hermes.framework"
+    end
+
+  elsif source[:git] then
+
+    spec.subspec 'Hermes' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'API/hermes/*.h'
+      ss.header_dir = 'hermes'
+    end
+
+    spec.subspec 'JSI' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'API/jsi/jsi/*.h'
+      ss.header_dir = 'jsi'
+    end
+
+    spec.subspec 'Public' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'public/hermes/Public/*.h'
+      ss.header_dir = 'hermes/Public'
+    end
+
+    hermesc_path = "${PODS_ROOT}/hermes-engine/build_host_hermesc"
+
+    if ENV.has_key?('HERMES_OVERRIDE_HERMESC_PATH') && File.exist?(ENV['HERMES_OVERRIDE_HERMESC_PATH']) then
+      hermesc_path = ENV['HERMES_OVERRIDE_HERMESC_PATH']
+    end
+
+    spec.user_target_xcconfig = {
+      'HERMES_CLI_PATH' => "#{hermesc_path}/bin/hermesc"
+    }
+
+    spec.prepare_command = ". #{react_native_path}/sdks/hermes-engine/utils/create-dummy-hermes-xcframework.sh"
+
+    CMAKE_BINARY = %x(command -v cmake | tr -d '\n')
+    # NOTE: Script phases are sorted alphabetically inside Xcode project
+    spec.script_phases = [
+      {
+        :name => '[RN] [1] Build Hermesc',
+        :script => <<-EOS
+        . ${PODS_ROOT}/../.xcode.env
+        export CMAKE_BINARY=${CMAKE_BINARY:-#{CMAKE_BINARY}}
+        . ${REACT_NATIVE_PATH}/sdks/hermes-engine/utils/build-hermesc-xcode.sh #{hermesc_path}
+        EOS
+      },
+      {
+        :name => '[RN] [2] Build Hermes',
+        :script => <<-EOS
+        . ${PODS_ROOT}/../.xcode.env
+        export CMAKE_BINARY=${CMAKE_BINARY:-#{CMAKE_BINARY}}
+        . ${REACT_NATIVE_PATH}/sdks/hermes-engine/utils/build-hermes-xcode.sh #{version} #{hermesc_path}/ImportHermesc.cmake
+        EOS
+      }
+    ]
+  end
+end
diff --git a/node_modules/react-native/sdks/hermes/hermes-utils.rb b/node_modules/react-native/sdks/hermes/hermes-utils.rb
new file mode 100644
index 0000000..06f3644
--- /dev/null
+++ b/node_modules/react-native/sdks/hermes/hermes-utils.rb
@@ -0,0 +1,144 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+require 'net/http'
+require 'rexml/document'
+
+# This function abort the build if the `HERMES_ENGINE_TARBALL_PATH` ENV variable is set with an invalid path
+def abort_if_invalid_tarball_provided!()
+    if ENV.has_key?('HERMES_ENGINE_TARBALL_PATH') && !File.exist?(ENV['HERMES_ENGINE_TARBALL_PATH'])
+        abort "[Hermes] HERMES_ENGINE_TARBALL_PATH is set, but points to a non-existing file: \"#{ENV['HERMES_ENGINE_TARBALL_PATH']}\"\nIf you don't want to use tarball, run `unset HERMES_ENGINE_TARBALL_PATH`"
+    end
+end
+
+# It computes the right value for the hermes-engine.podspec's source.
+# - To use a specific tarball, install the dependencies with:
+# `HERMES_ENGINE_TARBALL_PATH=<path_to_tarball> bundle exec pod install`
+# - To force a build from source, install the dependencies with:
+# `BUILD_FROM_SOURCE=true bundle exec pod install`
+# If none of the two are provided, Cocoapods will check whether there is a tarball for the current version
+# (either release or nightly). If not, it will fall back building from source (the latest commit on main).
+#
+# Parameters:
+# - build_from_source: boolean to force a build from source.
+# - hermestag_file: path to the hermes tag file.
+# - git: uri to the hermes repository
+# - version: current version of the pod
+# - build_type: build type of the hermes engine. It can be `:release` or `:debug`
+# - react_native_path: path to react native
+#
+# Returns: a properly configured source object
+def compute_hermes_source(build_from_source, hermestag_file, git, version, build_type, react_native_path)
+    source = {}
+
+    if ENV.has_key?('HERMES_ENGINE_TARBALL_PATH')
+        use_tarball(source)
+    elsif build_from_source
+        if File.exist?(hermestag_file)
+            build_from_tagfile(source, git, hermestag_file)
+        else
+            build_hermes_from_source(source, git)
+        end
+    elsif hermes_artifact_exists(release_tarball_url(version, build_type))
+        use_release_tarball(source, version, build_type)
+    elsif hermes_artifact_exists(nightly_tarball_url(version).gsub("\\", ""))
+        use_nightly_tarball(source, react_native_path, version)
+    else
+        build_hermes_from_source(source, git)
+    end
+
+    return source
+end
+
+def use_tarball(source)
+    tarball_path = ENV['HERMES_ENGINE_TARBALL_PATH']
+    putsIfPodPresent("[Hermes] Using pre-built Hermes binaries from local path: #{tarball_path}")
+    source[:http] = "file://#{tarball_path}"
+end
+
+def build_from_tagfile(source, git, hermestag_file)
+    hermestag = File.read(hermestag_file).strip
+    putsIfPodPresent("[Hermes] Building Hermes from source from tag #{hermestag}...")
+    source[:git] = git
+    source[:tag] = hermestag
+end
+
+def use_release_tarball(source, version, build_type)
+    # Sample url from Maven:
+    # https://repo1.maven.org/maven2/com/facebook/react/react-native-artifacts/0.71.0/react-native-artifacts-0.71.0-hermes-ios-debug.tar.gz
+    putsIfPodPresent('[Hermes] Using the release tarball from Maven Central', 'info')
+    source[:http] = release_tarball_url(version, build_type)
+end
+
+def release_tarball_url(version, build_type)
+    return "https://repo1.maven.org/maven2/com/facebook/react/react-native-artifacts/#{version}/react-native-artifacts-#{version}-hermes-ios-#{build_type.to_s}.tar.gz"
+end
+
+def use_nightly_tarball(source, react_native_path, version)
+    putsIfPodPresent('[Hermes] Nightly version, download pre-built for Hermes')
+    destination_path = download_nightly_hermes(react_native_path, version)
+    # set tarball as hermes engine
+    source[:http] = "file://#{destination_path}"
+end
+
+def putsIfPodPresent(message, level = 'warning')
+    unless Object.const_defined?("Pod::UI")
+        return
+    end
+
+    case level
+    when 'info'
+        Pod::UI.puts message.green
+    when 'error'
+        Pod::UI.puts message.red
+    else
+        Pod::UI.puts message.yellow
+    end
+end
+
+# This function downloads the nightly prebuilt version of Hermes based on the passed version
+# and save it in the node_module/react_native/sdks/downloads folder
+# It then returns the path to the hermes tarball
+#
+# Parameters
+# - react_native_path: the path to the React Native folder in node modules. It is used as root path to store the Hermes tarball
+# - version: the version of React Native that requires the Hermes tarball
+# Returns: the path to the downloaded Hermes tarball
+def download_nightly_hermes(react_native_path, version)
+    tarball_url = nightly_tarball_url(version)
+
+    destination_folder = "#{react_native_path}/sdks/downloads"
+    destination_path = "#{destination_folder}/hermes-ios-#{version}.tar.gz"
+
+    unless File.exist?(destination_path)
+      # Download to a temporary file first so we don't cache incomplete downloads.
+      tmp_file = "#{destination_folder}/hermes-ios.download"
+      `mkdir -p "#{destination_folder}" && curl "#{tarball_url}" -Lo "#{tmp_file}" && mv "#{tmp_file}" "#{destination_path}"`
+    end
+    return destination_path
+end
+
+def nightly_tarball_url(version)
+    params = "r=snapshots\&g=com.facebook.react\&a=react-native-artifacts\&c=hermes-ios-debug\&e=tar.gz\&v=#{version}-SNAPSHOT"
+    return "http://oss.sonatype.org/service/local/artifact/maven/redirect\?#{params}"
+end
+
+def build_hermes_from_source(source, git)
+    putsIfPodPresent('[Hermes] Installing hermes-engine may take slightly longer, building Hermes compiler from source...')
+    source[:git] = git
+    source[:commit] = `git ls-remote https://github.com/facebook/hermes main | cut -f 1`.strip
+end
+
+# This function checks that Hermes artifact exists.
+# As of now it should check it on the Maven repo.
+#
+# Parameters
+# - version: the version of React Native
+# - build_type: debug or release
+def hermes_artifact_exists(tarball_url)
+    # -L is used to follow redirects, useful for the nightlies
+    # I also needed to wrap the url in quotes to avoid escaping & and ?.
+    return (`curl -o /dev/null --silent -Iw '%{http_code}' -L "#{tarball_url}"` == "200")
+end
