diff --git a/node_modules/react-native-media-console/lib/typescript/types.d.ts b/node_modules/react-native-media-console/lib/typescript/types.d.ts
index 046564a..f369a37 100644
--- a/node_modules/react-native-media-console/lib/typescript/types.d.ts
+++ b/node_modules/react-native-media-console/lib/typescript/types.d.ts
@@ -1,5 +1,5 @@
 import type { RefObject } from 'react';
-import type { ViewStyle, StyleProp, Animated } from 'react-native';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type Reanimated from 'react-native-reanimated';
 import type { StyleProps } from 'react-native-reanimated';
 import type VideoResource from 'react-native-video';
@@ -227,4 +227,9 @@ export interface VideoPlayerProps extends VideoProperties {
          */
         inverted?: boolean;
     };
+    /**
+    * Element to replace video
+    *
+    */
+   posterElement?: ReactElement;
 }
diff --git a/node_modules/react-native-media-console/src/VideoPlayer.tsx b/node_modules/react-native-media-console/src/VideoPlayer.tsx
index ae20078..e310471 100644
--- a/node_modules/react-native-media-console/src/VideoPlayer.tsx
+++ b/node_modules/react-native-media-console/src/VideoPlayer.tsx
@@ -1,23 +1,23 @@
-import React, {useCallback, useState, useEffect, useRef} from 'react';
-import {View} from 'react-native';
+import React, { useCallback, useEffect, useRef, useState } from 'react';
+import { View } from 'react-native';
 import Video, {
   OnLoadData,
   OnProgressData,
   OnSeekData,
 } from 'react-native-video';
-import {useControlTimeout, useJSAnimations, usePanResponders} from './hooks';
+import { PlatformSupport } from './OSSupport';
 import {
+  BottomControls,
   Error,
   Loader,
-  TopControls,
-  BottomControls,
-  PlayPause,
   Overlay,
+  PlayPause,
+  TopControls,
 } from './components';
-import {PlatformSupport} from './OSSupport';
-import {_onBack} from './utils';
-import {_styles} from './styles';
-import type {VideoPlayerProps, WithRequiredProperty} from './types';
+import { useControlTimeout, useJSAnimations, usePanResponders } from './hooks';
+import { _styles } from './styles';
+import type { VideoPlayerProps, WithRequiredProperty } from './types';
+import { _onBack } from './utils';
 
 const volumeWidth = 150;
 const iconOffset = 0;
@@ -72,6 +72,7 @@ const AnimatedVideoPlayer = (
     navigator,
     rewindTime = 15,
     pan: {horizontal: horizontalPan, inverted: invertedPan} = {},
+    posterElement
   } = props;
 
   const mounted = useRef(false);
@@ -87,6 +88,7 @@ const AnimatedVideoPlayer = (
   const [_isFullscreen, setIsFullscreen] = useState<boolean>(
     isFullscreen || resizeMode === 'cover' || false,
   );
+  const [_isEnd, setIsEnd] = useState<boolean>(false);
   const [_showTimeRemaining, setShowTimeRemaining] =
     useState<boolean>(showTimeRemaining);
   const [volumeTrackWidth, setVolumeTrackWidth] = useState<number>(0);
@@ -120,10 +122,12 @@ const AnimatedVideoPlayer = (
   };
 
   const _onSeek = (obj: OnSeekData) => {
-    if (!seeking) {
-      setControlTimeout();
+    setControlTimeout();
+    setCurrentTime(obj.currentTime);
+    if(_isEnd){
+      setCurrentTime(duration);
+      setIsEnd(false)
     }
-    setCurrentTime(obj.seekTime);
 
     if (typeof onSeek === 'function') {
       onSeek(obj);
@@ -134,6 +138,7 @@ const AnimatedVideoPlayer = (
     if (currentTime < duration) {
       setCurrentTime(duration);
       setPaused(!props.repeat);
+      setIsEnd(true);
 
       if (showOnEnd) {
         setShowControls(!props.repeat);
@@ -407,9 +412,10 @@ const AnimatedVideoPlayer = (
           paused={_paused}
           muted={_muted}
           rate={rate}
-          style={[_styles.player.video, styles.videoStyle]}
+          style={[_styles.player.video, styles.videoStyle, {...posterElement ? {opacity: 0}: {}}]}
           source={source}
         />
+        {posterElement ?? null}
         {loading ? (
           <Loader />
         ) : (
@@ -436,12 +442,25 @@ const AnimatedVideoPlayer = (
               togglePlayPause={togglePlayPause}
               resetControlTimeout={resetControlTimeout}
               showControls={showControls}
-              onPressRewind={() =>
-                videoRef?.current?.seek(currentTime - rewindTime)
-              }
-              onPressForward={() =>
-                videoRef?.current?.seek(currentTime + rewindTime)
-              }
+              onPressRewind={() =>{
+                if(currentTime !== 0){
+                  if(currentTime - rewindTime > 0){
+                    videoRef?.current?.seek(currentTime - rewindTime)
+                  } else {
+                    setSeekerPosition(0)
+                    videoRef?.current?.seek(0)
+                  }
+                }
+              }}
+              onPressForward={() =>{
+                if(Math.floor(currentTime) < Math.floor(duration)){
+                  if(currentTime + rewindTime > duration){
+                    videoRef?.current?.seek(duration - 0.01)
+                  } else {
+                    videoRef?.current?.seek(currentTime + rewindTime)
+                  }
+                }
+              }}
             />
             <BottomControls
               animations={animations}
diff --git a/node_modules/react-native-media-console/src/components/Back/Back.tsx b/node_modules/react-native-media-console/src/components/Back/Back.tsx
index ef51f8d..e24c1bf 100644
--- a/node_modules/react-native-media-console/src/components/Back/Back.tsx
+++ b/node_modules/react-native-media-console/src/components/Back/Back.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
-import {Image} from 'react-native';
-import {Control} from '../Control';
+import { Image } from 'react-native';
+import { Control } from '../Control';
 
 interface BackProps {
   onBack: () => void;
@@ -11,7 +11,7 @@ interface BackProps {
 export const Back = ({onBack, showControls}: BackProps) => {
   return (
     <Control callback={onBack} disabled={!showControls}>
-      <Image source={require('../../assets/img/back.png')} />
+      <Image source={require('ASSETS/icons/bitmapIcons/close.png')} />
     </Control>
   );
 };
diff --git a/node_modules/react-native-media-console/src/components/Seekbar/styles.ts b/node_modules/react-native-media-console/src/components/Seekbar/styles.ts
index 554a24b..4c0557e 100644
--- a/node_modules/react-native-media-console/src/components/Seekbar/styles.ts
+++ b/node_modules/react-native-media-console/src/components/Seekbar/styles.ts
@@ -1,4 +1,4 @@
-import {StyleSheet} from 'react-native';
+import { StyleSheet } from 'react-native';
 
 export const styles = StyleSheet.create({
   container: {
@@ -6,6 +6,7 @@ export const styles = StyleSheet.create({
     height: 28,
     marginLeft: 20,
     marginRight: 20,
+    marginBottom: 15,
   },
   track: {
     backgroundColor: '#333',
diff --git a/node_modules/react-native-media-console/src/types.ts b/node_modules/react-native-media-console/src/types.ts
index 766ca8b..1539ac5 100644
--- a/node_modules/react-native-media-console/src/types.ts
+++ b/node_modules/react-native-media-console/src/types.ts
@@ -1,9 +1,9 @@
-import type {RefObject} from 'react';
-import type {ViewStyle, StyleProp, Animated} from 'react-native';
+import type { ReactElement, RefObject } from 'react';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type Reanimated from 'react-native-reanimated';
-import type {StyleProps} from 'react-native-reanimated';
+import type { StyleProps } from 'react-native-reanimated';
 import type VideoResource from 'react-native-video';
-import type {VideoProperties} from 'react-native-video';
+import type { VideoProperties } from 'react-native-video';
 
 export type WithRequiredProperty<Type, Key extends keyof Type> = Type & {
   [Property in Key]-?: Type[Property];
@@ -265,4 +265,9 @@ export interface VideoPlayerProps extends VideoProperties {
      */
     inverted?: boolean;
   };
+   /**
+    * Element to replace video
+    *
+    */
+   posterElement?: ReactElement;
 }
