diff --git a/node_modules/react-native-toast-message/lib/src/Toast.d.ts b/node_modules/react-native-toast-message/lib/src/Toast.d.ts
index 3efe69b..370db3e 100644
--- a/node_modules/react-native-toast-message/lib/src/Toast.d.ts
+++ b/node_modules/react-native-toast-message/lib/src/Toast.d.ts
@@ -4,4 +4,6 @@ export declare function Toast(props: ToastProps): JSX.Element;
 export declare namespace Toast {
     var show: (params: ToastShowParams) => void;
     var hide: (params?: void | undefined) => void;
+    var pause: () => void;
+    var resume: () => void;
 }
diff --git a/node_modules/react-native-toast-message/lib/src/Toast.js b/node_modules/react-native-toast-message/lib/src/Toast.js
index 0559ce5..24edbf8 100644
--- a/node_modules/react-native-toast-message/lib/src/Toast.js
+++ b/node_modules/react-native-toast-message/lib/src/Toast.js
@@ -4,15 +4,17 @@ import { ToastUI } from './ToastUI';
 import { useToast } from './useToast';
 const ToastRoot = React.forwardRef((props, ref) => {
     const { config, ...defaultOptions } = props;
-    const { show, hide, isVisible, options, data } = useToast({
+    const { show, hide, pause, resume, isVisible, options, data } = useToast({
         defaultOptions
     });
     // This must use useCallback to ensure the ref doesn't get set to null and then a new ref every render.
     React.useImperativeHandle(ref, React.useCallback(() => ({
         show,
-        hide
-    }), [hide, show]));
-    return (<ToastUI isVisible={isVisible} options={options} data={data} hide={hide} show={show} config={config}/>);
+        hide,
+        pause,
+        resume
+    }), [hide, show, pause, resume]));
+    return (<ToastUI isVisible={isVisible} options={options} data={data} hide={hide} show={show} pause={pause} resume={resume} config={config}/>);
 });
 let refs = [];
 /**
@@ -87,3 +89,9 @@ Toast.show = (params) => {
 Toast.hide = (params) => {
     getRef()?.hide(params);
 };
+Toast.pause = () => {
+    getRef()?.pause();
+};
+Toast.resume = () => {
+    getRef()?.resume();
+};
diff --git a/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js b/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js
index 1694188..2e62250 100644
--- a/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js
+++ b/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js
@@ -9,10 +9,8 @@ export function translateYOutputRangeFor({ position, height, topOffset, bottomOf
     const outputRange = position === 'bottom' ? additiveInverseArray(range) : range;
     return outputRange;
 }
-const useNativeDriver = Platform.select({
-    ios: true,
-    default: false
-});
+const useNativeDriver = false;
+
 export function useSlideAnimation({ position, height, topOffset, bottomOffset, keyboardOffset }) {
     const animatedValue = React.useRef(new Animated.Value(0));
     const { keyboardHeight } = useKeyboard();
diff --git a/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.d.ts b/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.d.ts
index 597039c..ec1e516 100644
--- a/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.d.ts
+++ b/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.d.ts
@@ -1,5 +1,5 @@
 declare function useTimeout<CbParams>(cb: (params?: CbParams) => void, delayMs?: number): {
-    startTimer: () => void;
+    startTimer: (newTime?: number) => void;
     clearTimer: () => void;
     isActive: boolean;
 };
diff --git a/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.js b/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.js
index 8636448..09fb3a7 100644
--- a/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.js
+++ b/node_modules/react-native-toast-message/lib/src/hooks/useTimeout.js
@@ -10,13 +10,13 @@ function useTimeout(cb, delayMs = 0) {
             ref.current = undefined;
         }
     }, [log]);
-    const startTimer = React.useCallback(() => {
+    const startTimer = React.useCallback(newTime => {
         clearTimer();
         ref.current = setTimeout(() => {
             cb();
             log('Running timer', ref.current);
             ref.current = undefined;
-        }, delayMs);
+        }, newTime ?? delayMs);
         log('Starting timer', ref.current);
     }, [clearTimer, delayMs, log, cb]);
     React.useEffect(() => () => clearTimer(), [clearTimer]);
diff --git a/node_modules/react-native-toast-message/lib/src/useToast.d.ts b/node_modules/react-native-toast-message/lib/src/useToast.d.ts
index 12bff36..e81f28f 100644
--- a/node_modules/react-native-toast-message/lib/src/useToast.d.ts
+++ b/node_modules/react-native-toast-message/lib/src/useToast.d.ts
@@ -10,4 +10,6 @@ export declare function useToast({ defaultOptions }: UseToastParams): {
     options: Required<ToastOptions>;
     show: (params: ToastShowParams) => void;
     hide: () => void;
+    pause: () => void;
+    resume: () => void;
 };
diff --git a/node_modules/react-native-toast-message/lib/src/useToast.js b/node_modules/react-native-toast-message/lib/src/useToast.js
index 12a44a0..56234b2 100644
--- a/node_modules/react-native-toast-message/lib/src/useToast.js
+++ b/node_modules/react-native-toast-message/lib/src/useToast.js
@@ -29,6 +29,8 @@ export function useToast({ defaultOptions }) {
     const [data, setData] = React.useState(DEFAULT_DATA);
     const initialOptions = mergeIfDefined(DEFAULT_OPTIONS, defaultOptions);
     const [options, setOptions] = React.useState(initialOptions);
+    const showTime = React.useRef(0);
+    const remainingTime = React.useRef(0);
     const onAutoHide = React.useCallback(() => {
         log('Auto hiding');
         setIsVisible(false);
@@ -68,7 +70,17 @@ export function useToast({ defaultOptions }) {
         // TODO: use a queue when Toast is already visible
         setIsVisible(true);
         onShow();
+        showTime.current = Date.now();
+        remainingTime.current = visibilityTime ?? initialOptions.visibilityTime;
     }, [initialOptions, log]);
+    const pause = React.useCallback(() => {
+        remainingTime.current = remainingTime.current - (Date.now() - showTime.current);
+        clearTimer();
+    }, []);
+    const resume = React.useCallback(() => {
+        showTime.current = Date.now();
+        startTimer(remainingTime.current);
+    }, []);
     React.useEffect(() => {
         const { autoHide } = options;
         if (isVisible) {
@@ -85,6 +97,8 @@ export function useToast({ defaultOptions }) {
         data,
         options,
         show,
-        hide
+        hide,
+        pause,
+        resume
     };
 }
