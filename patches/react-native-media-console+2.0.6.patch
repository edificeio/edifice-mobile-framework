diff --git a/node_modules/react-native-media-console/lib/typescript/types.d.ts b/node_modules/react-native-media-console/lib/typescript/types.d.ts
index 4e95969..3eb2fec 100644
--- a/node_modules/react-native-media-console/lib/typescript/types.d.ts
+++ b/node_modules/react-native-media-console/lib/typescript/types.d.ts
@@ -1,5 +1,5 @@
-import type { RefObject } from 'react';
-import type { Animated, ViewStyle, StyleProp } from 'react-native';
+import type { ReactElement, RefObject } from 'react';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type VideoResource from 'react-native-video';
 import type { VideoProperties } from 'react-native-video';
 export interface VideoAnimations {
@@ -197,4 +197,9 @@ export interface VideoPlayerProps extends VideoProperties {
      * @default 15
      */
     rewindTime?: number;
+    /**
+     * Element to replace video
+     *
+     */
+    posterElement?: ReactElement;
 }
diff --git a/node_modules/react-native-media-console/src/VideoPlayer.tsx b/node_modules/react-native-media-console/src/VideoPlayer.tsx
index 5ea0ab2..24ea200 100644
--- a/node_modules/react-native-media-console/src/VideoPlayer.tsx
+++ b/node_modules/react-native-media-console/src/VideoPlayer.tsx
@@ -1,23 +1,23 @@
-import React, {useCallback, useState, useEffect, useRef} from 'react';
-import {View} from 'react-native';
+import React, { useCallback, useEffect, useRef, useState } from 'react';
+import { View } from 'react-native';
 import Video, {
   OnLoadData,
   OnProgressData,
   OnSeekData,
 } from 'react-native-video';
-import {useControlTimeout, useAnimations, usePanResponders} from './hooks';
+import { PlatformSupport } from './OSSupport';
 import {
+  BottomControls,
   Error,
   Loader,
-  TopControls,
-  BottomControls,
-  PlayPause,
   Overlay,
+  PlayPause,
+  TopControls,
 } from './components';
-import {PlatformSupport} from './OSSupport';
-import {_onBack} from './utils';
-import {_styles} from './styles';
-import type {VideoPlayerProps} from './types';
+import { useAnimations, useControlTimeout, usePanResponders } from './hooks';
+import { _styles } from './styles';
+import type { VideoPlayerProps } from './types';
+import { _onBack } from './utils';
 
 const volumeWidth = 150;
 const iconOffset = 0;
@@ -67,6 +67,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     disableSeekButtons = false,
     navigator,
     rewindTime = 15,
+    posterElement
   } = props;
 
   const mounted = useRef(false);
@@ -82,6 +83,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   const [_isFullscreen, setIsFullscreen] = useState<boolean>(
     isFullscreen || resizeMode === 'cover' || false,
   );
+  const [_isEnd, setIsEnd] = useState<boolean>(false);
   const [_showTimeRemaining, setShowTimeRemaining] =
     useState<boolean>(showTimeRemaining);
   const [volumeTrackWidth, setVolumeTrackWidth] = useState<number>(0);
@@ -114,10 +116,12 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   };
 
   const _onSeek = (obj: OnSeekData) => {
-    if (!seeking) {
-      setControlTimeout();
+    setControlTimeout();
+    setCurrentTime(obj.currentTime);
+    if(_isEnd){
+      setCurrentTime(duration);
+      setIsEnd(false)
     }
-    setCurrentTime(obj.seekTime);
 
     if (typeof onSeek === 'function') {
       onSeek(obj);
@@ -128,6 +132,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     if (currentTime < duration) {
       setCurrentTime(duration);
       setPaused(true);
+      setIsEnd(true);
 
       if (showOnEnd) {
         setShowControls(true);
@@ -397,9 +402,10 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
           paused={_paused}
           muted={_muted}
           rate={rate}
-          style={[_styles.player.video, styles.videoStyle]}
+          style={[_styles.player.video, styles.videoStyle, {...posterElement ? {opacity: 0}: {}}]}
           source={source}
         />
+        {posterElement ?? null}
         {loading ? (
           <Loader animations={animations} />
         ) : (
@@ -426,11 +432,25 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
               togglePlayPause={togglePlayPause}
               resetControlTimeout={resetControlTimeout}
               showControls={showControls}
-              onPressRewind={() =>
-                videoRef?.current?.seek(currentTime - rewindTime)
+              onPressRewind={() =>{
+                if(currentTime !== 0){
+                  if(currentTime - rewindTime > 0){
+                    videoRef?.current?.seek(currentTime - rewindTime)
+                  } else {
+                    setSeekerPosition(0)
+                    videoRef?.current?.seek(0)
+                  }
+                }
+              }}
+              onPressForward={() =>{
+                if(Math.floor(currentTime) < Math.floor(duration)){
+                  if(currentTime + rewindTime > duration){
+                    videoRef?.current?.seek(duration - 0.01)
+                  } else {
+                    videoRef?.current?.seek(currentTime + rewindTime)
+                  }
+                }
               }
-              onPressForward={() =>
-                videoRef?.current?.seek(currentTime + rewindTime)
               }
             />
             <BottomControls
diff --git a/node_modules/react-native-media-console/src/components/Back/Back.tsx b/node_modules/react-native-media-console/src/components/Back/Back.tsx
index ef51f8d..92457ce 100644
--- a/node_modules/react-native-media-console/src/components/Back/Back.tsx
+++ b/node_modules/react-native-media-console/src/components/Back/Back.tsx
@@ -11,7 +11,7 @@ interface BackProps {
 export const Back = ({onBack, showControls}: BackProps) => {
   return (
     <Control callback={onBack} disabled={!showControls}>
-      <Image source={require('../../assets/img/back.png')} />
+      <Image source={require('ASSETS/icons/bitmapIcons/close.png')} />
     </Control>
   );
 };
diff --git a/node_modules/react-native-media-console/src/components/TopControls.tsx b/node_modules/react-native-media-console/src/components/TopControls.tsx
index 3df2574..d0baa0c 100644
--- a/node_modules/react-native-media-console/src/components/TopControls.tsx
+++ b/node_modules/react-native-media-console/src/components/TopControls.tsx
@@ -6,6 +6,8 @@ import {
   StyleSheet,
   View,
   GestureResponderHandlers,
+  ViewStyle,
+  StyleProp,
 } from 'react-native';
 import {Volume} from './Volume';
 import {Back} from './Back';
@@ -22,12 +24,14 @@ interface TopControlProps {
   volumeFillWidth: number;
   volumeTrackWidth: number;
   volumePosition: number;
+  topControlsStyle?: StyleProp<ViewStyle>;
   onBack: () => void;
   resetControlTimeout: () => void;
 }
 
 export const TopControls = memo(
   ({
+    topControlsStyle,
     showControls,
     panHandlers,
     animations,
@@ -67,13 +71,13 @@ export const TopControls = memo(
           {
             opacity: animations.controlsOpacity,
             marginTop: animations.topControl.marginTop,
-          },
+          }
         ]}>
         <ImageBackground
           source={require('../assets/img/top-vignette.png')}
           style={[styles.column]}
           imageStyle={[styles.vignette]}>
-          <SafeAreaView style={_styles.topControlGroup}>
+          <SafeAreaView style={[_styles.topControlGroup, topControlsStyle]}>
             {backControl}
             <View style={_styles.pullRight}>{volumeControl}</View>
           </SafeAreaView>
diff --git a/node_modules/react-native-media-console/src/types.ts b/node_modules/react-native-media-console/src/types.ts
<<<<<<< HEAD
index ab51aed..d0857d8 100644
--- a/node_modules/react-native-media-console/src/types.ts
+++ b/node_modules/react-native-media-console/src/types.ts
@@ -62,6 +62,13 @@ export interface VideoPlayerProps extends VideoProperties {
=======
index ab51aed..00552c1 100644
--- a/node_modules/react-native-media-console/src/types.ts
+++ b/node_modules/react-native-media-console/src/types.ts
@@ -1,7 +1,7 @@
-import type {RefObject} from 'react';
-import type {Animated, ViewStyle, StyleProp} from 'react-native';
+import type { ReactElement, RefObject } from 'react';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type VideoResource from 'react-native-video';
-import type {VideoProperties} from 'react-native-video';
+import type { VideoProperties } from 'react-native-video';
 
 export interface VideoAnimations {
   bottomControl: {marginBottom: Animated.Value};
@@ -226,4 +226,10 @@ export interface VideoPlayerProps extends VideoProperties {
    * @default 15
>>>>>>> dev/1.11.0
    */
   rewindTime?: number;
+
+  /**
+   * Element to replace video
+   *
+   */
+  posterElement?: ReactElement;
 }
