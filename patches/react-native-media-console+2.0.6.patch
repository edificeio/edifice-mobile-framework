diff --git a/node_modules/react-native-media-console/lib/typescript/types.d.ts b/node_modules/react-native-media-console/lib/typescript/types.d.ts
index 4e95969..fcff7c4 100644
--- a/node_modules/react-native-media-console/lib/typescript/types.d.ts
+++ b/node_modules/react-native-media-console/lib/typescript/types.d.ts
@@ -1,5 +1,5 @@
 import type { RefObject } from 'react';
-import type { Animated, ViewStyle, StyleProp } from 'react-native';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type VideoResource from 'react-native-video';
 import type { VideoProperties } from 'react-native-video';
 export interface VideoAnimations {
@@ -58,6 +58,12 @@ export interface VideoPlayerProps extends VideoProperties {
      * @default false
      */
     showOnEnd?: boolean;
+    /**
+     * Show controls always even when you touch the screen
+     *
+     * @default false
+     */
+    alwaysShowControls?: boolean;
     /**
      * Title of the video
      */
diff --git a/node_modules/react-native-media-console/src/VideoPlayer.tsx b/node_modules/react-native-media-console/src/VideoPlayer.tsx
index 5ea0ab2..24bdb4b 100644
--- a/node_modules/react-native-media-console/src/VideoPlayer.tsx
+++ b/node_modules/react-native-media-console/src/VideoPlayer.tsx
@@ -1,23 +1,23 @@
-import React, {useCallback, useState, useEffect, useRef} from 'react';
-import {View} from 'react-native';
+import React, { useCallback, useEffect, useRef, useState } from 'react';
+import { View } from 'react-native';
 import Video, {
   OnLoadData,
   OnProgressData,
   OnSeekData,
 } from 'react-native-video';
-import {useControlTimeout, useAnimations, usePanResponders} from './hooks';
+import { PlatformSupport } from './OSSupport';
 import {
+  BottomControls,
   Error,
   Loader,
-  TopControls,
-  BottomControls,
-  PlayPause,
   Overlay,
+  PlayPause,
+  TopControls,
 } from './components';
-import {PlatformSupport} from './OSSupport';
-import {_onBack} from './utils';
-import {_styles} from './styles';
-import type {VideoPlayerProps} from './types';
+import { useAnimations, useControlTimeout, usePanResponders } from './hooks';
+import { _styles } from './styles';
+import type { VideoPlayerProps } from './types';
+import { _onBack } from './utils';
 
 const volumeWidth = 150;
 const iconOffset = 0;
@@ -31,6 +31,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     isFullscreen = false,
     showOnStart = false,
     showOnEnd = false,
+    alwaysShowControls = false,
     paused = false,
     muted = false,
     volume = 1,
@@ -82,6 +83,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   const [_isFullscreen, setIsFullscreen] = useState<boolean>(
     isFullscreen || resizeMode === 'cover' || false,
   );
+  const [_isEnd, setIsEnd] = useState<boolean>(false);
   const [_showTimeRemaining, setShowTimeRemaining] =
     useState<boolean>(showTimeRemaining);
   const [volumeTrackWidth, setVolumeTrackWidth] = useState<number>(0);
@@ -114,10 +116,12 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   };
 
   const _onSeek = (obj: OnSeekData) => {
-    if (!seeking) {
-      setControlTimeout();
+    setControlTimeout();
+    setCurrentTime(obj.currentTime);
+    if(_isEnd){
+      setCurrentTime(duration);
+      setIsEnd(false)
     }
-    setCurrentTime(obj.seekTime);
 
     if (typeof onSeek === 'function') {
       onSeek(obj);
@@ -128,6 +132,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     if (currentTime < duration) {
       setCurrentTime(duration);
       setPaused(true);
+      setIsEnd(true);
 
       if (showOnEnd) {
         setShowControls(true);
@@ -189,7 +194,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
           togglePlayPause();
           resetControlTimeout();
         } else {
-          toggleControls();
+          if(!alwaysShowControls) {toggleControls()};
         }
         tapActionTimeout.current = null;
       }, doubleTapTime);
@@ -426,11 +431,25 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
               togglePlayPause={togglePlayPause}
               resetControlTimeout={resetControlTimeout}
               showControls={showControls}
-              onPressRewind={() =>
-                videoRef?.current?.seek(currentTime - rewindTime)
+              onPressRewind={() =>{
+                if(currentTime !== 0){
+                  if(currentTime - rewindTime > 0){
+                    videoRef?.current?.seek(currentTime - rewindTime)
+                  } else {
+                    setSeekerPosition(0)
+                    videoRef?.current?.seek(0)
+                  }
+                }
+              }}
+              onPressForward={() =>{
+                if(Math.floor(currentTime) < Math.floor(duration)){
+                  if(currentTime + rewindTime > duration){
+                    videoRef?.current?.seek(duration - 0.01)
+                  } else {
+                    videoRef?.current?.seek(currentTime + rewindTime)
+                  }
+                }
               }
-              onPressForward={() =>
-                videoRef?.current?.seek(currentTime + rewindTime)
               }
             />
             <BottomControls
diff --git a/node_modules/react-native-media-console/src/components/Back/Back.tsx b/node_modules/react-native-media-console/src/components/Back/Back.tsx
index ef51f8d..92457ce 100644
--- a/node_modules/react-native-media-console/src/components/Back/Back.tsx
+++ b/node_modules/react-native-media-console/src/components/Back/Back.tsx
@@ -11,7 +11,7 @@ interface BackProps {
 export const Back = ({onBack, showControls}: BackProps) => {
   return (
     <Control callback={onBack} disabled={!showControls}>
-      <Image source={require('../../assets/img/back.png')} />
+      <Image source={require('ASSETS/icons/bitmapIcons/close.png')} />
     </Control>
   );
 };
diff --git a/node_modules/react-native-media-console/src/components/TopControls.tsx b/node_modules/react-native-media-console/src/components/TopControls.tsx
index 3df2574..ea74e23 100644
--- a/node_modules/react-native-media-console/src/components/TopControls.tsx
+++ b/node_modules/react-native-media-console/src/components/TopControls.tsx
@@ -1,17 +1,17 @@
-import React, {memo} from 'react';
+import React, { memo } from 'react';
 import {
   Animated,
+  GestureResponderHandlers,
   ImageBackground,
   SafeAreaView,
   StyleSheet,
-  View,
-  GestureResponderHandlers,
+  View
 } from 'react-native';
-import {Volume} from './Volume';
-import {Back} from './Back';
-import {NullControl} from './NullControl';
-import {styles} from './styles';
-import type {VideoAnimations} from '../types';
+import type { VideoAnimations } from '../types';
+import { Back } from './Back';
+import { NullControl } from './NullControl';
+import { Volume } from './Volume';
+import { styles } from './styles';
 
 interface TopControlProps {
   showControls: boolean;
@@ -67,7 +67,7 @@ export const TopControls = memo(
           {
             opacity: animations.controlsOpacity,
             marginTop: animations.topControl.marginTop,
-          },
+          }
         ]}>
         <ImageBackground
           source={require('../assets/img/top-vignette.png')}
diff --git a/node_modules/react-native-media-console/src/types.ts b/node_modules/react-native-media-console/src/types.ts
index ab51aed..a8cf27a 100644
--- a/node_modules/react-native-media-console/src/types.ts
+++ b/node_modules/react-native-media-console/src/types.ts
@@ -1,7 +1,7 @@
-import type {RefObject} from 'react';
-import type {Animated, ViewStyle, StyleProp} from 'react-native';
+import type { RefObject } from 'react';
+import type { Animated, StyleProp, ViewStyle } from 'react-native';
 import type VideoResource from 'react-native-video';
-import type {VideoProperties} from 'react-native-video';
+import type { VideoProperties } from 'react-native-video';
 
 export interface VideoAnimations {
   bottomControl: {marginBottom: Animated.Value};
@@ -62,6 +62,13 @@ export interface VideoPlayerProps extends VideoProperties {
    */
   showOnEnd?: boolean;
 
+  /**
+     * Show controls always even when you touch the screen
+     *
+     * @default false
+     */
+  alwaysShowControls?: boolean;
+
   /**
    * Title of the video
    */
