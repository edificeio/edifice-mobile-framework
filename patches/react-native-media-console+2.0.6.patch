diff --git a/node_modules/react-native-media-console/lib/typescript/types.d.ts b/node_modules/react-native-media-console/lib/typescript/types.d.ts
index 4e95969..d5f41a3 100644
--- a/node_modules/react-native-media-console/lib/typescript/types.d.ts
+++ b/node_modules/react-native-media-console/lib/typescript/types.d.ts
@@ -58,6 +58,12 @@ export interface VideoPlayerProps extends VideoProperties {
      * @default false
      */
     showOnEnd?: boolean;
+    /**
+     * Show controls always even when you touch the screen
+     *
+     * @default false
+     */
+    alwaysShowControls?: boolean;
     /**
      * Title of the video
      */
@@ -130,6 +136,11 @@ export interface VideoPlayerProps extends VideoProperties {
      *
      */
     containerStyle?: StyleProp<ViewStyle>;
+    /**
+     * Top controls styles
+     *
+     */
+    topControlsStyle?: StyleProp<ViewStyle>;
     /**
      * Fill/handle colour of the seekbar
      *
diff --git a/node_modules/react-native-media-console/src/VideoPlayer.tsx b/node_modules/react-native-media-console/src/VideoPlayer.tsx
index 5ea0ab2..29f6c5f 100644
--- a/node_modules/react-native-media-console/src/VideoPlayer.tsx
+++ b/node_modules/react-native-media-console/src/VideoPlayer.tsx
@@ -31,6 +31,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     isFullscreen = false,
     showOnStart = false,
     showOnEnd = false,
+    alwaysShowControls = false,
     paused = false,
     muted = false,
     volume = 1,
@@ -56,6 +57,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     tapAnywhereToPause = false,
     videoStyle = {},
     containerStyle = {},
+    topControlsStyle = {},
     seekColor = '',
     source,
     disableBack = false,
@@ -82,6 +84,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   const [_isFullscreen, setIsFullscreen] = useState<boolean>(
     isFullscreen || resizeMode === 'cover' || false,
   );
+  const [_isEnd, setIsEnd] = useState<boolean>(false);
   const [_showTimeRemaining, setShowTimeRemaining] =
     useState<boolean>(showTimeRemaining);
   const [volumeTrackWidth, setVolumeTrackWidth] = useState<number>(0);
@@ -114,10 +117,12 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
   };
 
   const _onSeek = (obj: OnSeekData) => {
-    if (!seeking) {
-      setControlTimeout();
+    setControlTimeout();
+    setCurrentTime(obj.currentTime);
+    if(_isEnd){
+      setCurrentTime(duration);
+      setIsEnd(false)
     }
-    setCurrentTime(obj.seekTime);
 
     if (typeof onSeek === 'function') {
       onSeek(obj);
@@ -128,6 +133,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
     if (currentTime < duration) {
       setCurrentTime(duration);
       setPaused(true);
+      setIsEnd(true);
 
       if (showOnEnd) {
         setShowControls(true);
@@ -189,7 +195,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
           togglePlayPause();
           resetControlTimeout();
         } else {
-          toggleControls();
+          if(!alwaysShowControls) {toggleControls()};
         }
         tapActionTimeout.current = null;
       }, doubleTapTime);
@@ -417,6 +423,7 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
               onBack={events.onBack}
               resetControlTimeout={resetControlTimeout}
               showControls={showControls}
+              topControlsStyle={topControlsStyle}
             />
             <PlayPause
               animations={animations}
@@ -426,11 +433,25 @@ export const VideoPlayer = (props: VideoPlayerProps) => {
               togglePlayPause={togglePlayPause}
               resetControlTimeout={resetControlTimeout}
               showControls={showControls}
-              onPressRewind={() =>
-                videoRef?.current?.seek(currentTime - rewindTime)
+              onPressRewind={() =>{
+                if(currentTime !== 0){
+                  if(currentTime - rewindTime > 0){
+                    videoRef?.current?.seek(currentTime - rewindTime)
+                  } else {
+                    setSeekerPosition(0)
+                    videoRef?.current?.seek(0)
+                  }
+                }
+              }}
+              onPressForward={() =>{
+                if(Math.floor(currentTime) < Math.floor(duration)){
+                  if(currentTime + rewindTime > duration){
+                    videoRef?.current?.seek(duration - 0.01)
+                  } else {
+                    videoRef?.current?.seek(currentTime + rewindTime)
+                  }
+                }
               }
-              onPressForward={() =>
-                videoRef?.current?.seek(currentTime + rewindTime)
               }
             />
             <BottomControls
diff --git a/node_modules/react-native-media-console/src/components/Back/Back.tsx b/node_modules/react-native-media-console/src/components/Back/Back.tsx
index ef51f8d..92457ce 100644
--- a/node_modules/react-native-media-console/src/components/Back/Back.tsx
+++ b/node_modules/react-native-media-console/src/components/Back/Back.tsx
@@ -11,7 +11,7 @@ interface BackProps {
 export const Back = ({onBack, showControls}: BackProps) => {
   return (
     <Control callback={onBack} disabled={!showControls}>
-      <Image source={require('../../assets/img/back.png')} />
+      <Image source={require('ASSETS/icons/bitmapIcons/close.png')} />
     </Control>
   );
 };
diff --git a/node_modules/react-native-media-console/src/components/TopControls.tsx b/node_modules/react-native-media-console/src/components/TopControls.tsx
index 3df2574..a10d98a 100644
--- a/node_modules/react-native-media-console/src/components/TopControls.tsx
+++ b/node_modules/react-native-media-console/src/components/TopControls.tsx
@@ -6,6 +6,8 @@ import {
   StyleSheet,
   View,
   GestureResponderHandlers,
+  ViewStyle,
+  StyleProp,
 } from 'react-native';
 import {Volume} from './Volume';
 import {Back} from './Back';
@@ -22,12 +24,14 @@ interface TopControlProps {
   volumeFillWidth: number;
   volumeTrackWidth: number;
   volumePosition: number;
+  topControlsStyle?: StyleProp<ViewStyle>;
   onBack: () => void;
   resetControlTimeout: () => void;
 }
 
 export const TopControls = memo(
   ({
+    topControlsStyle,
     showControls,
     panHandlers,
     animations,
@@ -68,6 +72,7 @@ export const TopControls = memo(
             opacity: animations.controlsOpacity,
             marginTop: animations.topControl.marginTop,
           },
+          topControlsStyle
         ]}>
         <ImageBackground
           source={require('../assets/img/top-vignette.png')}
diff --git a/node_modules/react-native-media-console/src/types.ts b/node_modules/react-native-media-console/src/types.ts
index ab51aed..d0857d8 100644
--- a/node_modules/react-native-media-console/src/types.ts
+++ b/node_modules/react-native-media-console/src/types.ts
@@ -62,6 +62,13 @@ export interface VideoPlayerProps extends VideoProperties {
    */
   showOnEnd?: boolean;
 
+  /**
+     * Show controls always even when you touch the screen
+     *
+     * @default false
+     */
+  alwaysShowControls?: boolean;
+
   /**
    * Title of the video
    */
@@ -149,6 +156,12 @@ export interface VideoPlayerProps extends VideoProperties {
    */
   containerStyle?: StyleProp<ViewStyle>;
 
+  /**
+   * Top controls styles
+   *
+   */
+  topControlsStyle?: StyleProp<ViewStyle>;
+
   /**
    * Fill/handle colour of the seekbar
    *
